// #region Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------
//  Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = "postgresql://postgres:02Ago1962@localhost:5432/square_project"
  extensions = [postgis(version: "3.4.0")]
}

// #endregion

// #region Enums
//  ------------------------------------------------------------------------------------------------------------
//  Enums
//  ------------------------------------------------------------------------------------------------------------

enum DiaSemana {
  DOMINGO       @map("Domingo")
  SEGUNDA_FEIRA @map("Segunda Feira")
  TERCA_FEIRA   @map("Terca Feira")
  QUARTA_FEIRA  @map("Quarta Feira")
  QUINTA_FEIRA  @map("Quinta Feira")
  SEXTA_FEIRA   @map("Sexta Feira")
  SABADO        @map("Sabado")

  @@map("dia_semana")
}

enum Estados {
  ACRE                @map("Acre")
  ALAGOAS             @map("Alagoas")
  AMAPA               @map("Amapa")
  AMAZONAS            @map("Amazonas")
  BAHIA               @map("Bahia")
  CEARA               @map("Ceara")
  DISTRITO_FEDERAL    @map("Distrito Federal")
  ESPIRITO_SANTO      @map("Espirito Santo")
  GOIAS               @map("Goias")
  MARANHAO            @map("Maranhao")
  MATO_GROSSO         @map("Matro Grosso")
  MATO_GROSSO_DO_SUL  @map("Mato Grosso do Sul")
  MINAS_GERAIS        @map("Minas Gerais")
  PARA                @map("Para")
  PARAIBA             @map("Paraiba")
  PARANA              @map("Parana")
  PERNAMBUCO          @map("Pernambuco")
  PIAUI               @map("Piaui")
  RIO_DE_JANEIRO      @map("Rio de Janeiro")
  RIO_GRANDE_DO_NORTE @map("Rio Grande do Norte")
  RIO_GRANDE_DO_SUL   @map("Rio Grande do Sul")
  RONDONIA            @map("Rondonia")
  RORAIMA             @map("Roraima")
  SANTA_CATARINA      @map("Santa Catarina")
  SAO_PAULO           @map("Sao Paulo")
  SERGIPE             @map("Sergipe")
  TOCANTINS           @map("Tocantins")

  @@map("estados")
}

enum TiposLocal {
  CANTEIROS_CENTRAIS_E_LATERAIS_DE_PORTE                          @map("Canteiros Centrais e Laterais de Porte")
  CANTOS_DE_QUADRA                                                @map("Cantos de Quadra")
  JARDIM                                                          @map("Jardim")
  LARGO                                                           @map("Largo")
  MIRANTE                                                         @map("Mirante")
  PRACA                                                           @map("Praca")
  PRACA_CERCADA                                                   @map("Praca Cercada")
  TERRENA_NAO_OCUPADO                                             @map("Terreno Não Ocupado")
  TERRENOS_REMANESCENTES_DE_SISTEMA_VIARIO_E_PARCELAMENTO_DE_SOLO @map("Terrenos Remanescentes de Sistema Viario/Parcelamento de Solo")
  ROTATORIO                                                       @map("Rotatorio")
  TREVO                                                           @map("Trevo")

  @@map("tipos_local")
}

enum TiposUsuario {
  ADMIN
  PESQUISADOR

  @@map("tipos_usuario")
}

enum CategoriasEspacoLivre {
  DE_PRATICAS_SOCIAIS                  @map("de Praticas Sociais")
  ESPACO_LIVRE_PRIVADO_DE_USO_COLETIVO @map("Espaco Livre Privado de Uso Coletivo")

  @@map("categorias_espaco_livre")
}

enum QuestionTypes {
  TEXT    @map("Text")
  NUMERIC @map("Numeric")
  OPTIONS @map("Options")

  @@map("question_types")
}

enum OptionTypes {
  SELECTION @map("selection")
  RADIO     @map("radio")
  CHECKBOX  @map("checkbox")

  @@map("option_types")
}

enum Maintenance {
  TERRIBLE @map("terrible")
  POOR     @map("poor")
  GOOD     @map("good")
  GREAT    @map("great")

  @@map("maintenance")
}

enum Upkeep {
  SMALL_INTEFERENCE   @map("small interference")
  MEDIUM_INTERFERENCE @map("medium interference")
  GREAT_INTERFERENCE  @map("great interference")

  @@map("upkeep")
}

enum Visibility {
  UPTO_25  @map("up to 25%")
  UPTO_50  @map("up to 50%")
  UPTO_75  @map("up to 75%")
  UPTO_100 @map("up to 100%")

  @@map("visibility")
}

enum AgeGroup {
  CHILD   @map("child")
  TEEN    @map("teen")
  ADULT   @map("adult")
  ELDERLY @map("elderly")

  @@map("age_group")
}

enum Activity {
  SEDENTARY @map("sedentario")
  WALKING   @map("walking")
  STRENUOUS @map("strenuous")

  @@map("atividade")
}

enum Sex {
  MALE   @map("male")
  FEMALE @map("female")

  @@map("sex")
}

// #endregion

// #region Formulários
//  ------------------------------------------------------------------------------------------------------------
//  Formulários
//  ------------------------------------------------------------------------------------------------------------

model Category {
  id Int @id @default(autoincrement())

  name     String     @db.VarChar(255)
  optional Boolean    @default(false)
  active   Boolean    @default(true)
  question Question[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Question {
  id Int @id @default(autoincrement())

  name     String        @db.VarChar(255)
  optional Boolean       @default(false)
  active   Boolean       @default(true)
  type     QuestionTypes

  TextQuestion    TextQuestion?
  NumericQuestion NumericQuestion?
  OptionsQuestion OptionsQuestion?

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("question")
}

model TextQuestion {
  id Int @id @default(autoincrement())

  charLimit Int? @map("char_limit")

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("text_question")
}

model NumericQuestion {
  id Int @id @default(autoincrement())

  min Int?
  max Int?

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("numeric_question")
}

model OptionsQuestion {
  id Int @id @default(autoincrement())

  optionType OptionTypes @map("option_type")

  // Should only have a value if optionType == CHECKBOX
  maximumSelections Int? @map("maximum_selections")

  questionId Int      @unique @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  options Option[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("options_question")
}

model Option {
  id Int @id @default(autoincrement())

  text String @db.VarChar(255)

  optionsQuestionId Int             @map("options_question_id")
  OptionsQuestion   OptionsQuestion @relation(fields: [optionsQuestionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("option")
}

model Form {
  id Int @id @default(autoincrement())

  nome String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("form")
}

// #endregion

// #region Informações da Praça
//  ------------------------------------------------------------------------------------------------------------
//  Informações da Praça
//  ------------------------------------------------------------------------------------------------------------

model Local {
  id Int @id @default(autoincrement())

  nome                                String    @db.VarChar(255)
  ePraca                              Boolean?  @map("e_praca") // ? não sei o que que é isso
  // common_name         String                   @db.VarChar(255)
  observacoes                         String?   @db.Text
  anoCriacao                          DateTime? @map("ano_criacao") @db.Date
  anoReforma                          DateTime? @map("ano_reforma") @db.Date
  prefeitoCriacao                     String?   @map("prefeito_criacao") @db.VarChar(255)
  legislacao                          String?   @db.VarChar(255)
  areaUtil                            Float?    @map("area_util")
  areaPrefeitura                      Float?    @map("area_prefeitura")
  inclinacao                          Float?
  regiaoUrbana                        String?   @map("regiao_urbana") @db.VarChar(255) // ? não sei o que que é isso
  inativoNaoLocalizado                Boolean?  @map("invativo_nao_localizado") // ? isso não seria por avaliação ao invés de por praça?
  poligonoArea                        Float?    @map("poligono_area")
  delimitacaoAdministrativaMenosAmpla String?   @map("delimitacao_administrativa_menos_ampla")
  delimitacaoAdministrativaMaisAmpla  String?   @map("delimitacao_administrativa_mais_ampla")

  tipo                 TiposLocal?
  categoriaEspacoLivre CategoriasEspacoLivre?                       @map("categoria_espaco_livre")
  poligono             Unsupported("Geometry(MultiPolygon, 4326)")?

  endereco  Endereco[]
  avaliacao Avaliacao[]
  contagem  Contagem[]
  ruido     Ruido[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("local")
}

model Endereco {
  id Int @id @default(autoincrement())

  bairro String @db.VarChar(255)
  rua    String @db.VarChar(255)
  cep    String @db.VarChar(255)
  numero Int

  estado Estados

  localId  Int    @map("local_id")
  local    Local  @relation(fields: [localId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cidadeId Int    @map("cidade_id")
  cidade   Cidade @relation(fields: [cidadeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("endereco")
}

model Cidade {
  id Int @id @default(autoincrement())

  nome String @unique @db.VarChar(255)

  endereco Endereco[]
  regiao   Regiao[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("cidade")
}

model Regiao {
  id Int @id @default(autoincrement())

  regiao String @db.VarChar(255)

  cidade Cidade[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("regiao")
}

// #endregion

// #region Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Avaliacao {
  id Int @id @default(autoincrement())

  dataInicio       DateTime @map("data_inicio") @db.Timestamptz()
  dataFim          DateTime @map("data_fim") @db.Timestamptz()
  alteracaoLimites Boolean? @map("alteracao_limites") // ? o que é alteração limites?
  wifi             Boolean

  calcadaPavimentada            Boolean @map("calcada_pavimentada")
  quantidadeLixeira             Int     @map("quantidade_lixeira")
  quantidadeBanheiro            Int     @map("quantidade_banheiro")
  quantidadeTelefonePublico     Int     @map("quantidade_telefone_publico")
  quantidadeBededouro           Int     @map("quantidade_bebedouro")
  quantidadeObraArte            Int     @map("quantidade_obra_arte")
  quantidadePaisagismoPlanejado Int     @map("quantidade_paisagismo_planejado")
  quantidadeCadeiraMovel        Int     @map("quantidade_cadeira_movel")

  conservacaoCalcada             Maintenance @map("conservacao_calcada")
  conservacaoLixeira             Maintenance @map("conservacao_lixeira")
  conservacaoBanheiro            Maintenance @map("conservacao_banheiro")
  conservacaoTelefonePublico     Maintenance @map("conservacao_telefone_publico")
  conservacaoBededouro           Maintenance @map("conservacao_bebedouro")
  conservacaoObraArte            Maintenance @map("conservacao_obra_arte")
  conservacaoPaisagismoPlanejado Maintenance @map("conservacao_paisagismo_planejado")
  conservacaoCadeiraMovel        Maintenance @map("conservacao_cadeira_movel")

  acessibilidade         Acessibilidade?
  acessoEntorno          AcessoEntorno?
  areaAtividades         AreaAtividades?
  // contagem               Contagem?
  depredacao             Depredacao?
  elementosPaisagisticos ElementosPaisagisticos?
  espacosAssento         EspacosAssento?
  evento                 Evento[]
  // ruido                  Ruido?
  segurancaViaria        SegurancaViaria?
  usoDensidadeEntorno    UsoDensidadeEntorno?
  vigilancia             Vigilancia?
  usuario                Usuario[]

  localId Int   @map("local_id")
  local   Local @relation(fields: [localId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("avaliacao")
}

model Usuario {
  id Int @id @default(autoincrement())

  nome  String       @db.VarChar(255)
  tipo  TiposUsuario
  email String       @db.VarChar(255)
  senha String       @db.VarChar(255)

  avaliacao Avaliacao[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("usuario")
}

// #endregion

// #region Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Acessibilidade {
  id Int @id @default(autoincrement())

  calcadaEntornoFaixaLivre   Boolean @map("calcada_entorno_faixa_livre")
  calcadaEntornoFaixaServico Boolean @map("calcada_entrono_faixa_servico")
  alturaLivre                Boolean @map("altura_livre")
  travessiaRebaixamento      Boolean @map("travessia_rebaixamento")
  ausenciaObstaculos         Boolean @map("ausencia_obstaculos")
  inclinacaoMax              Boolean @map("iclinacao_max")
  inclinacaoLongitudinal     Boolean @map("inclinacao_longitudinal")
  sinalizacaoTatil           Boolean @map("sinalizacao_tatil")
  revestimentoPiso           Boolean @map("revestimento_piso")
  vagasPcd                   Int     @map("vagas_pcd")
  vagasIdosos                Int     @map("vagas_idosos")
  rotaAcessivel              Boolean @map("rota_acessivel")
  equipamentoAdaptado        Boolean @map("equipamento_adaptado")

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("acessibilidade")
}

model AcessoEntorno {
  id Int @id @default(autoincrement())

  cercaHorarioFuncionamento Boolean @map("cerca_horario_funcionamento")
  placaIdentificacao        Boolean @map("placa_identificacao")
  baiasOnibus               Int     @map("baias_onibus")
  vagasTaxi                 Int     @map("vagas_taxi")
  vagasCarro                Int     @map("vagas_carro")
  vagasMoto                 Int     @map("vagas_moto")
  ciclovia                  Boolean

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("acesso_entorno")
}

model AreaAtividades {
  id Int @id @default(autoincrement())

  categoria    Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  sombraMinima Boolean     @map("sombra_minima")
  iluminacao   Boolean
  cercado      Boolean
  bancos       Boolean
  conservacao  Maintenance
  descricao    String?     @db.Text

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("area_atividades")
}

model Depredacao {
  id Int @id @default(autoincrement())

  nivelPichacao Upkeep @map("nivel_pichacao")
  nivelAbandono Upkeep @map("nivel_abandono")

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("depredacao")
}

model ElementosPaisagisticos {
  id Int @id @default(autoincrement())

  categoria    Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  sombraMinima Boolean @map("sombra_minima")
  iluminacao   Boolean
  cercado      Boolean
  bancos       Boolean
  conservacao  Int
  descricao    String? @db.Text

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("elementos_paisagisticos")
}

// ↑ condensar esses dois em um modelo só? ↓
model EspacosAssento {
  id Int @id @default(autoincrement())

  categoria    Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  sombraMinima Boolean @map("sombra_minima")
  iluminacao   Boolean
  cercado      Boolean
  bancos       Boolean
  conservacao  Int

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("espacos_assento")
}

model Evento {
  id Int @id @default(autoincrement())

  frequenciaUltimoAno Int    @map("frequencia_ultimo_ano")
  categoria           Int // ? Talvez seja melhor referenciar outra tabela para esse valores, assim deixando que sejam adicionados mais futuramente e que possamos ter auto-complete para o usuário
  nomeResponsavel     String @map("nome_responsavel") @db.VarChar(255) // pelo que entendi seria o nome do responsável pela praça, não por evento

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("eventos")
}

model SegurancaViaria {
  id Int @id @default(autoincrement())

  faixaPedestre    Boolean @map("faixa_pedestre")
  semaforo         Boolean
  placasVelocidade Boolean @map("placas_velocidade")

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("seguranca_viaria")
}

// ? o que que é isso?
model UsoDensidadeEntorno {
  id Int @id @default(autoincrement())

  usoEdificacoes String @map("uso_edificacoes") @db.Text

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("uso_densidade_entorno")
}

model Vigilancia {
  id Int @id @default(autoincrement())

  cameras           Boolean
  postoPolicial     Boolean    @map("posto_policial")
  nivelVisibilidade Visibility @map("nivel_visibilidade")

  avaliacaoId Int       @unique @map("avaliacao_id")
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vigilancia")
}

// #endregion

// #region Campos das Avaliações Não Relacionados à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações Não Relacionadas à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------

model Contagem {
  id Int @id @default(autoincrement())

  data              DateTime? @db.Date
  inicio            DateTime? @db.Timestamptz(0)
  fim               DateTime? @db.Timestamptz(0)
  quantidadeAnimais Int?      @map("quantidade_animais")
  temperatura       Float?
  condicaoCeu       String?   @map("condicao_ceu") @db.VarChar(255)

  // avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])
  // avaliacaoId Int       @unique @map("avaliacao_id")

  pessoaNoLocal PessoaNoLocal[]

  localId Int   @unique @map("local_id")
  local   Local @relation(fields: [localId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contagem")
}

// Não acho que a gente deveria ter uma linha por pessoa, dá para condensar isso em ints dentro de contagem
model PessoaNoLocal {
  id Int @id @default(autoincrement())

  classificacaoEtaria AgeGroup @map("classificacao_etaria")
  sexo                Sex
  atividadeFisica     Activity @map("atividade_fisica")
  passando            Boolean
  pessoaDeficiente    Boolean  @map("pessoa_deficiente")
  atividadeIlicita    Boolean  @map("atividade_ilicita")
  situacaoRua         Boolean  @map("situacao_rua")

  contagemId Int      @map("contagem_id")
  contagem   Contagem @relation(fields: [contagemId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pessoa_no_local")
}

model Ruido {
  id Int @id @default(autoincrement())

  nivelDb   Float  @map("nivel_db")
  categoria String @db.VarChar(255) // ? se eu entendi isso certo essa categoria devia ser um enum, não?

  localId Int   @unique @map("local_id")
  local   Local @relation(fields: [localId], references: [id])
  // avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])
  // avaliacaoId Int       @unique @map("avaliacao_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ruido")
}

// #endregion
