// #region Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------
//  Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = "postgresql://postgres:02Ago1962@localhost:5432/square_project"
  extensions = [postgis]
}

// #endregion

// #region Auth
//  ------------------------------------------------------------------------------------------------------------
//  Auth
//  ------------------------------------------------------------------------------------------------------------

model User {
  id String @id @unique

  email    String?   @db.VarChar(255)
  username String    @db.VarChar(255)
  type     UserTypes

  auth_session Session[]
  key          Key[]

  assessmentId Int?        @map("assessment_id")
  Assessment   Assessment? @relation(fields: [assessmentId], references: [id])

  @@map("user")
}

model Session {
  id String @id @unique

  active_expires BigInt
  idle_expires   BigInt

  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?

  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// #endregion

// #region Enums
//  ------------------------------------------------------------------------------------------------------------
//  Enums
//  ------------------------------------------------------------------------------------------------------------

enum WeekDays {
  SUNDAY    @map("Sunday")
  MONDAY    @map("Monday")
  TUESDAY   @map("Tuesday")
  WEDNESDAY @map("Wednesday")
  THURSDAY  @map("Thursday")
  FRIDAY    @map("Friday")
  SATURDAY  @map("Saturday")

  @@map("week_days")
}

enum BrazilianStates {
  ACRE                @map("Acre")
  ALAGOAS             @map("Alagoas")
  AMAPA               @map("Amapa")
  AMAZONAS            @map("Amazonas")
  BAHIA               @map("Bahia")
  CEARA               @map("Ceara")
  DISTRITO_FEDERAL    @map("Distrito Federal")
  ESPIRITO_SANTO      @map("Espirito Santo")
  GOIAS               @map("Goias")
  MARANHAO            @map("Maranhao")
  MATO_GROSSO         @map("Matro Grosso")
  MATO_GROSSO_DO_SUL  @map("Mato Grosso do Sul")
  MINAS_GERAIS        @map("Minas Gerais")
  PARA                @map("Para")
  PARAIBA             @map("Paraiba")
  PARANA              @map("Parana")
  PERNAMBUCO          @map("Pernambuco")
  PIAUI               @map("Piaui")
  RIO_DE_JANEIRO      @map("Rio de Janeiro")
  RIO_GRANDE_DO_NORTE @map("Rio Grande do Norte")
  RIO_GRANDE_DO_SUL   @map("Rio Grande do Sul")
  RONDONIA            @map("Rondonia")
  RORAIMA             @map("Roraima")
  SANTA_CATARINA      @map("Santa Catarina")
  SAO_PAULO           @map("Sao Paulo")
  SERGIPE             @map("Sergipe")
  TOCANTINS           @map("Tocantins")

  @@map("brazilian_states")
}

enum LocationTypes {
  MICRO_SQUARE          @map("Micro Square")
  SQUARE                @map("Square")
  SPORTS_SQUARE         @map("Sports Square")
  OVERLOOK              @map("Overlook")
  COURTYARD             @map("Courtyard")
  GARDEN                @map("Garden")
  CHURCHYARD            @map("Churchyard")
  PARK                  @map("Park")
  BOTANICAL_GARDEN      @map("Botanical Garden")
  FOREST_GARDEN         @map("Forest Garden")
  AMATEUR_SOCCER_FIELDS @map("Amateur Soccer Fields")

  @@map("location_types")
}

enum UserTypes {
  ADMIN      @map("Admin")
  RESEARCHER @map("Researcher")

  @@map("user_types")
}

enum CategoryTypes {
  OPEN_SPACE_FOR_COLLECTIVE_USE                    @map("Open Spce for Collective Use")
  OPEN_SPACE_FOR_COLLECTIVE_USE_IN_RESTRICTED_AREA @map("Open Space for Collective Use in Restricted Area")

  @@map("category_types")
}

enum QuestionTypes {
  TEXT    @map("Text")
  NUMERIC @map("Numeric")
  OPTIONS @map("Options")

  @@map("question_types")
}

enum OptionTypes {
  SELECTION @map("selection")
  RADIO     @map("radio")
  CHECKBOX  @map("checkbox")

  @@map("option_types")
}

enum Condition {
  TERRIBLE @map("terrible")
  POOR     @map("poor")
  GOOD     @map("good")
  GREAT    @map("great")

  @@map("maintenance")
}

enum Interference {
  SMALL  @map("small")
  MEDIUM @map("medium")
  GREAT  @map("great")

  @@map("interference")
}

enum Visibility {
  UP_TO_25  @map("up to 25%")
  UP_TO_50  @map("up to 50%")
  UP_TO_75  @map("up to 75%")
  UP_TO_100 @map("up to 100%")

  @@map("visibility")
}

enum AgeGroup {
  CHILD   @map("child")
  TEEN    @map("teen")
  ADULT   @map("adult")
  ELDERLY @map("elderly")

  @@map("age_group")
}

enum Activity {
  SEDENTARY @map("sedentary")
  WALKING   @map("walking")
  STRENUOUS @map("strenuous")

  @@map("atividade")
}

// Don't really like naming this gender since you can't really tell someones gender based on the way they look
// but since they're going to be needing this data we might as well be as inclusive as possible
// Removed "NON_BINARY" to better fit example files
enum Gender {
  MALE   @map("male")
  FEMALE @map("female")

  @@map("gender")
}

enum NoiseLocation {
  CENTER       @map("center")
  SURROUNDINGS @map("surroundings")

  @@map("noise_categories")
}

enum Morphology {
  CORNER
  CENTER
  ISOLATED
  DIVIDED
}

// #endregion

// #region Formulários
//  ------------------------------------------------------------------------------------------------------------
//  Formulários
//  ------------------------------------------------------------------------------------------------------------

//model Category {
//  id Int @id @default(autoincrement())
//
//  name     String     @db.VarChar(255)
//  optional Boolean    @default(false)
//  active   Boolean    @default(true)
//  question Question[]
//
//  createdAt DateTime @default(now()) @map("created_at")
//  updatedAt DateTime @updatedAt @map("updated_at")
//
//  @@map("category")
//}

//model Question {
//  id Int @id @default(autoincrement())
//
//  name     String        @db.VarChar(255)
//  optional Boolean       @default(false)
//  active   Boolean       @default(true)
//  type     QuestionTypes
//
//  TextQuestion    TextQuestion?
//  NumericQuestion NumericQuestion?
//  OptionsQuestion OptionsQuestion?
//
//  categoryId Int      @map("category_id")
//  category   Category @relation(fields: [categoryId], references: [id])
//
//  createdAt DateTime @default(now()) @map("created_at")
//  updatedAt DateTime @updatedAt @map("updated_at")
//
//  @@map("question")
//}

//model TextQuestion {
//  id Int @id @default(autoincrement())
//
//  charLimit Int? @map("char_limit")
//
//  questionId Int      @unique @map("question_id")
//  question   Question @relation(fields: [questionId], references: [id])
//
//  createdAt DateTime @default(now()) @map("created_at")
//  updatedAt DateTime @updatedAt @map("updated_at")
//
//  @@map("text_question")
//}

//model NumericQuestion {
//  id Int @id @default(autoincrement())
//
//  min Int?
//  max Int?
//
//  questionId Int      @unique @map("question_id")
//  question   Question @relation(fields: [questionId], references: [id])
//
//  createdAt DateTime @default(now()) @map("created_at")
//  updatedAt DateTime @updatedAt @map("updated_at")
//
//  @@map("numeric_question")
//}

//model OptionsQuestion {
//  id Int @id @default(autoincrement())
//
//  optionType OptionTypes @map("option_type")
//
//  // Should only have a value if optionType == CHECKBOX
//  maximumSelections Int? @map("maximum_selections")
//
//  questionId Int      @unique @map("question_id")
//  question   Question @relation(fields: [questionId], references: [id])
//
//  options Option[]
//
//  createdAt DateTime @default(now()) @map("created_at")
//  updatedAt DateTime @updatedAt @map("updated_at")
//
//  @@map("options_question")
//}

//model Option {
//  id Int @id @default(autoincrement())
//
//  text String @db.VarChar(255)
//
//  optionsQuestionId Int             @map("options_question_id")
//  OptionsQuestion   OptionsQuestion @relation(fields: [optionsQuestionId], references: [id])
//
//  createdAt DateTime  @default(now()) @map("created_at")
//  updatedAt DateTime? @updatedAt @map("updated_at")
//
//  @@map("option")
//}

model Form {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  assessments     Assessment[]
  classifications Classification[]
  locations       Location[]
  questions       Question[]
  answers         Answer[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("form")
}

model Classification {
  id       Int              @id @default(autoincrement())
  name     String           @db.VarChar(255)
  childs   Classification[] @relation("children")
  parentId Int?
  parent   Classification?  @relation("children", fields: [parentId], references: [id])

  questions Question[]
  answers   Answer[]
  forms     Form[]

  @@map("classification")
}

model Question {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  classificationId Int
  classification   Classification @relation(fields: [classificationId], references: [id])
  forms            Form[]
  answers          Answer[]

  @@map("question")
}

model Answer {
  id           Int        @id @default(autoincrement())
  questionId   Int
  question     Question   @relation(fields: [questionId], references: [id])
  formId       Int
  form         Form       @relation(fields: [formId], references: [id])
  locationId   Int
  location     Location   @relation(fields: [locationId], references: [id])
  assessmentId Int
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  classificationId Int
  classification   Classification @relation(fields: [classificationId], references: [id])
  content          String         @db.VarChar(255)

  @@unique([questionId, assessmentId])
  @@map("answer")
}

enum WeatherConditions {
  CLOUDY @map("cloudy")
  SUNNY  @map("sunny")

  @@map("weather_conditions")
}

// #endregion

// #region Informações da Praça
//  ------------------------------------------------------------------------------------------------------------
//  Informações da Praça
//  ------------------------------------------------------------------------------------------------------------

model Location {
  id Int @id @default(autoincrement())

  name                String    @db.VarChar(255)
  isPark              Boolean?  @map("is_park")
  notes               String?   @db.Text
  popularName         String?   @db.VarChar(255)
  creationYear        DateTime? @map("creation_year") @db.Date
  lastMaintenanceYear DateTime? @map("last_maintenance_year") @db.Date
  overseeingMayor     String?   @map("overseeing_mayor") @db.VarChar(255)
  legislation         String?   @db.VarChar(255)
  usableArea          Float?    @map("usable_area")
  legalArea           Float?    @map("legal_area")
  incline             Float?
  shadowArea          Float?    @map("shadow_area")
  inactiveNotFound    Boolean?  @map("inactive_not_found") // ? isso não seria por avaliação ao invés de por praça?
  polygonArea         Float?    @map("polygon_area")

  type     LocationTypes?
  category CategoryTypes?                               @map("category")
  polygon  Unsupported("Geometry(MultiPolygon, 4326)")?

  narrowAdministrativeUnitId       Int?
  narrowAdministrativeUnit         NarrowAdministrativeUnit?       @relation(fields: [narrowAdministrativeUnitId], references: [id])
  intermediateAdministrativeUnitId Int?
  intermediateAdministrativeUnit   IntermediateAdministrativeUnit? @relation(fields: [intermediateAdministrativeUnitId], references: [id])
  broadAdministrativeUnitId        Int?
  broadAdministrativeUnit          BroadAdministrativeUnit?        @relation(fields: [broadAdministrativeUnitId], references: [id])

  //IBGE data
  householdDensity   String? @map("household_density") @db.VarChar(255)
  income             String? @db.VarChar(255)
  density            String? @db.VarChar(255)
  men                Int?
  women              Int?
  occupiedHouseholds Int?    @map("occupied_households")

  //Morphology
  morphology Morphology?

  //Street typology
  streets4mWide  Int? @map("streets_4m_wide")
  streets6mWide  Int? @map("streets_6m_wide")
  streets8mWide  Int? @map("streets_8m_wide")
  streets10mWide Int? @map("streets_10m_wide")
  streets20mWide Int? @map("streets_20m_wide")

  address     Address[]
  assessments Assessment[]
  tallys      Tally[]
  forms       Form[]
  answers     Answer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("location")
}

model Address {
  id Int @id @default(autoincrement())

  cityId       Int
  city         City    @relation(fields: [cityId], references: [id])
  neighborhood String  @db.VarChar(255)
  street       String  @db.VarChar(255)
  postalCode   String? @map("postal_code") @db.VarChar(255)
  identifier   Int? //qual a função disso?

  state BrazilianStates

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("address")
}

model City {
  id Int @id @default(autoincrement())

  name String @unique @db.VarChar(255)

  address                        Address[]
  narrowAdministrativeUnit       NarrowAdministrativeUnit[]
  intermediateAdministrativeUnit IntermediateAdministrativeUnit[]
  broadAdministrativeUnit        BroadAdministrativeUnit[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("city")
}

model NarrowAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_narrowUnitName")
  @@map("narrow_administrative_unit")
}

model IntermediateAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_intermediateUnitName")
  @@map("intermediate_administrative_unit")
}

model BroadAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_broadUnitName")
  @@map("broad_administrative_unit")
}

// #endregion

// #region Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Assessment {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  startDate DateTime  @map("start_date") @db.Timestamptz()
  endDate   DateTime? @map("end_date") @db.Timestamptz()
  user      User[]

  noise Noise[]

  formId     Int      @map("form_id")
  form       Form     @relation(fields: [formId], references: [id])
  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])
  answers    Answer[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("Assessment")
}

// #endregion

// #region Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------

// Removed assessment's related tables due to the use of dynamic forms

// #endregion

// #region Campos das Avaliações Não Relacionados à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações Não Relacionadas à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------

model Tally {
  id Int @id @default(autoincrement())

  tallyGroup Int       @map("tally_group")
  startDate  DateTime  @db.Timestamptz(0)
  endDate    DateTime? @db.Timestamptz(0)
  observer   String    @db.VarChar(255)

  animalsAmount        Int?               @map("animals_amount")
  temperature          Float?
  weatherCondition     WeatherConditions? @map("weather_condition")
  groups               Int?
  commercialActivities Int?               @map("commercial_activities")

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  tallyPerson TallyPerson[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("tally")
}

model TallyPerson {
  id Int @id @default(autoincrement())

  tally   Tally @relation(fields: [tallyId], references: [id])
  tallyId Int   @map("tally_id")

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @map("person_id")

  quantity Int

  @@unique([tallyId, personId], name: "tally_id_person_id")
  @@map("tally_person")
}

model Person {
  id Int @id @default(autoincrement())

  ageGroup                    AgeGroup @map("age_group")
  gender                      Gender
  activity                    Activity @map("activity")
  isTraversing                Boolean  @map("is_traversing")
  isPersonWithImpairment      Boolean  @map("is_person_with_impairment") // * Inclusive language
  isInApparentIllicitActivity Boolean  @map("is_in_apparent_illicit_activity")
  isPersonWithoutHousing      Boolean  @map("is_person_without_housing") // * Inclusive language

  TallyPerson TallyPerson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([ageGroup, gender, activity, isTraversing, isPersonWithImpairment, isInApparentIllicitActivity, isPersonWithoutHousing], name: "person_characteristics")
  @@map("person")
}

model Noise {
  id Int @id @default(autoincrement())

  location   NoiseLocation
  soundLevel Float                                 @map("sound_level")
  point      Unsupported("Geometry(Point, 4326)")?

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([point], name: "location_idx", type: Gist)
  @@map("noise")
}
