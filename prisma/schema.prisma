generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = "postgresql://postgres:02Ago1962@localhost:5432/square_project"
    extensions = [postgis(version: "3.4.0")]
}

model acessibilidade {
    id                         Int        @id @default(autoincrement())
    avalicao                   avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id               Int?       @unique
    calcadaEntornoFaixaLivre   Boolean?
    calcadaEntornoFaixaServico Boolean?
    alturaLivre                Boolean?
    travessiaRebaixamento      Boolean?
    ausenciaObstaculos         Boolean?
    inclinacaoMax              Boolean?
    inclinacaoLongitudinal     Boolean?
    sinalizacaoTatil           Boolean?
    revestimentoPiso           Boolean?
    vagasPCD                   Int?
    vagasIdosos                Int?
    rotaAcessivel              Boolean?
    equipamentoAdaptado        Boolean?
    created_at                 DateTime   @default(now())
    updated_at                 DateTime?  @updatedAt
}

model areaAtividades {
    id           Int        @id @default(autoincrement())
    avalicao     avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id Int?       @unique
    categoria    Int?
    sombraMinima Boolean?
    iluminacao   Boolean?
    cercado      Boolean?
    bancos       Boolean?
    conservacao  Int?
    descricao    String?    @db.Text
    created_at   DateTime   @default(now())
    updated_at   DateTime?  @updatedAt
}

model avaliacao {
    id                             Int       @id @default(autoincrement())
    local_id                       Int?
    local                          local?    @relation(fields: [local_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    usuario_id                     Int?      @unique //Como pegar o id de todos os usuarios?
    data                           DateTime? @db.Date
    diaSemana                      Dia? //<- USAR ENUM?
    inicio                         DateTime? @db.Time(0)
    fim                            DateTime? @db.Time(0)
    alteracaoLimites               Boolean?
    calcadaPavimentada             Boolean?
    conservacaoCalcada             Int?
    wifi                           Boolean?
    qtdLixeiras                    Int?
    conservacaoLixeiras            Int?
    qtdBanheiro                    Int?
    conservacaoBanheiro            Int?
    qtdTelefonePublico             Int?
    conservacaoTelefonePublico     Int?
    qtdBededouro                   Int?
    conservacaoBededouro           Int?
    qtdObraArte                    Int?
    conservacaoObraArte            Int?
    qtdPaisagismoPlanejado         Int?
    conservacaoPaisagismoPlanejado Int?
    qtdCadeiraMoveis               Int?
    conservacaoCadeiraMoveis       Int?
    created_at                     DateTime? @default(now())
    updated_at                     DateTime? @updatedAt

    acessibilidade         acessibilidade?
    acessoEntorno          acessoEntorno?
    areaAtividades         areaAtividades?
    contagem               contagem?
    depredacao             depredacao?
    elementosPaisagisticos elementosPaisagisticos?
    espacosAssento         espacosAssento?
    feira                  feira[]
    ruido                  ruido?
    segurancaViaria        segurancaViaria?
    usoDensidadeEntorno    usoDensidadeEntorno?
    vigilancia             vigilancia?
    avalicao_usuario       avalicao_usuario[]
}

model acessoEntorno {
    id                        Int        @id @default(autoincrement())
    avalicao                  avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id              Int?       @unique
    cercaHorarioFuncionamento Boolean?
    placaIdentificacao        Boolean?
    baiasOnibus               Int?
    vagasTaxi                 Int?
    vagasCarro                Int?
    vagasMoto                 Int?
    ciclovia                  Boolean?
    created_at                DateTime?  @default(now())
    updated_at                DateTime?  @updatedAt
}

model contagem {
    id           Int        @id @default(autoincrement())
    avaliacao    avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id Int?       @unique
    data         DateTime?  @db.Date
    inicio       DateTime?
    fim          DateTime?
    qtdAnimais   Int?
    temperatura  Float?
    condicaoCeu  Int?
    created_at   DateTime?  @default(now())
    updated_at   DateTime?  @updatedAt

    pessoaNoLocal pessoaNoLocal[]
}

model depredacao {
    id            Int        @id @default(autoincrement())
    avaliacao     avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id  Int?       @unique
    nivelPichacao Int?
    nivelAbandono Int?
    created_at    DateTime?  @default(now())
    updated_at    DateTime?  @updatedAt
}

model elementosPaisagisticos {
    id           Int        @id @default(autoincrement())
    avaliacao    avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id Int?       @unique
    categoria    Int?
    sombraMinima Boolean?
    iluminacao   Boolean?
    cercado      Boolean?
    bancos       Boolean?
    conservacao  Int?
    descricao    String?    @db.Text
    created_at   DateTime?  @default(now())
    updated_at   DateTime?  @updatedAt
}

model endereco {
    id            Int         @id @default(autoincrement())
    local_id      Int?
    local         local?      @relation(fields: [local_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    UF            UFederacao? // enums!!!!!!!!!!!!!!
    cidade_tabela cidade?     @relation(fields: [cidade_id], references: [id])
    cidade_id     Int?
    bairro        String?     @db.VarChar(255)
    rua           String?     @db.VarChar(255)
    CEP           String?     @db.VarChar(255) // q q Ã© isso?
    numero        Int? // string???
    createdAt     DateTime?   @default(now())
    updatedAt     DateTime?   @updatedAt
}

model espacosAssento {
    id           Int        @id @default(autoincrement())
    avaliacao    avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id Int?       @unique
    categoria    Int?
    sombraMinima Boolean?
    iluminacao   Boolean?
    cercado      Boolean?
    bancos       Boolean?
    conservacao  Int?
    createdAt    DateTime?  @default(now())
    updatedAt    DateTime?  @updatedAt
}

model feira {
    id                  Int        @id @default(autoincrement())
    avaliacao           avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id        Int?       @unique
    frequenciaUltimoAno Int?
    categoria           Int?
    nomeResponsavel     String?    @db.VarChar(255)
    createdAt           DateTime?  @default(now())
    updatedAt           DateTime?  @updatedAt
}

model local {
    id                   Int                                          @id @default(autoincrement())
    nome                 String?                                      @db.VarChar(255)
    //common_name         String                   @db.VarChar(255)
    tipo                 Tipos_local?
    categoriaEspacoLivre CategoriasEspacoLivre?
    observacoes          String?
    anoCriacao           String?                                      @db.VarChar(255)
    anoReforma           String?                                      @db.VarChar(255)
    prefeitoCriacao      String?                                      @db.VarChar(255)
    legislacao           String?                                      @db.VarChar(255)
    areaUtil             Float?
    areaPrefeitura       Float?
    inclinacao           Float?
    regiaoUrbana         String?                                      @db.VarChar(255)
    inativoNaoLocalizado Boolean?
    poligono             Unsupported("Geometry(MultiPolygon, 4326)")?
    poligonoArea         Float?
    createdAt            DateTime?                                    @default(now())
    updatedAt            DateTime?                                    @updatedAt

    endereco  endereco[]
    avaliacao avaliacao[]
}

model pessoaNoLocal {
    id                  Int       @id @default(autoincrement())
    contagem            contagem? @relation(fields: [contagem_id], references: [id])
    contagem_id         Int?
    classificacaoEtaria Int?
    genero              Int?
    atividadeFisica     Int?
    passando            Boolean?
    pessoaDeficiente    Boolean?
    atividadeIlicita    Boolean?
    situacaoRua         Boolean?
    createdAt           DateTime? @default(now())
    updatedAt           DateTime? @updatedAt
}

model ruido {
    id           Int        @id @default(autoincrement())
    avaliacao    avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id Int?       @unique
    nivelDb      Float?
    categoria    String?    @db.VarChar(255)
    created_at   DateTime?  @default(now())
    updated_at   DateTime?  @updatedAt
}

model segurancaViaria {
    id               Int        @id @default(autoincrement())
    avaliacao        avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id     Int?       @unique
    faixaPedestre    Boolean?
    semaforo         Boolean?
    placasVelocidade Boolean?
    created_at       DateTime?  @default(now())
    updated_at       DateTime?  @updatedAt
}

model usoDensidadeEntorno {
    id             Int        @id @default(autoincrement())
    avaliacao      avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id   Int?       @unique
    usoEdificacoes String?    @db.Text
    created_at     DateTime?  @default(now())
    updated_at     DateTime?  @updatedAt
}

model usuario {
    id         Int            @id @default(autoincrement())
    nome       String?        @db.VarChar(255)
    tipo       Tipos_usuario?
    email      String?        @db.VarChar(255)
    senha      String?        @db.VarChar(255)
    created_at DateTime?      @default(now())
    updated_at DateTime?      @updatedAt

    avalicao_usuario avalicao_usuario[]
}

model vigilancia {
    id                Int        @id @default(autoincrement())
    avaliacao         avaliacao? @relation(fields: [avaliacao_id], references: [id])
    avaliacao_id      Int?       @unique
    cameras           Boolean?
    postoPolicial     Boolean?
    nivelVisibilidade Int?
    created_at        DateTime?  @default(now())
    updated_at        DateTime?  @updatedAt
}

enum Dia {
    DOMINGO
    SEGUNDA_FEIRA
    TERCA_FEIRA
    QUARTA_FEIRA
    QUINTA_FEIRA
    SEXTA_FEIRA
    SABADO
}

enum UFederacao {
    AC
    AL
    AP
    AM
    BA
    CE
    DF
    ES
    GO
    MA
    MT
    MS
    MG
    PA
    PB
    PR
    PE
    PI
    RJ
    RN
    RS
    RO
    RR
    SC
    SP
    SE
    TO
}

enum Tipos_local {
    PRACA
}

enum Tipos_usuario {
    ADMIN
    PESQUISADOR
}

enum CategoriasEspacoLivre {
    ESPACO_LIVRE_PUBLICO_USO_COLETIVO
}

model cidade {
    id            Int            @id @default(autoincrement())
    nome          String?        @unique @db.VarChar(255)
    endereco      endereco[]
    cidade_regiao cidade_regiao?
}

model avalicao_usuario {
    avaliacao_usuario_id Int
    avaliacao            avaliacao @relation(fields: [avaliacao_usuario_id], references: [usuario_id])

    usuario_id Int
    usuario    usuario @relation(fields: [usuario_id], references: [id])

    @@id([avaliacao_usuario_id, usuario_id])
}

model regiao {
    id            Int            @id @default(autoincrement())
    regiao        String
    cidade_regiao cidade_regiao?
}

model cidade_regiao {
    cidade_id Int    @unique
    cidade    cidade @relation(fields: [cidade_id], references: [id])
    regiao_id Int    @unique
    regiao    regiao @relation(fields: [regiao_id], references: [id])

    @@id([cidade_id, regiao_id])
}
