// #region Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------
//  Informações do Prisma
//  ------------------------------------------------------------------------------------------------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = "postgresql://postgres:02Ago1962@localhost:5432/square_project"
  extensions = [postgis]
}

// #endregion

// #region Enums
//  ------------------------------------------------------------------------------------------------------------
//  Enums
//  ------------------------------------------------------------------------------------------------------------

enum WeekDays {
  SUNDAY    @map("Sunday")
  MONDAY    @map("Monday")
  TUESDAY   @map("Tuesday")
  WEDNESDAY @map("Wednesday")
  THURSDAY  @map("Thursday")
  FRIDAY    @map("Friday")
  SATURDAY  @map("Saturday")

  @@map("week_days")
}

enum BrazilianStates {
  ACRE                @map("Acre")
  ALAGOAS             @map("Alagoas")
  AMAPA               @map("Amapa")
  AMAZONAS            @map("Amazonas")
  BAHIA               @map("Bahia")
  CEARA               @map("Ceara")
  DISTRITO_FEDERAL    @map("Distrito Federal")
  ESPIRITO_SANTO      @map("Espirito Santo")
  GOIAS               @map("Goias")
  MARANHAO            @map("Maranhao")
  MATO_GROSSO         @map("Matro Grosso")
  MATO_GROSSO_DO_SUL  @map("Mato Grosso do Sul")
  MINAS_GERAIS        @map("Minas Gerais")
  PARA                @map("Para")
  PARAIBA             @map("Paraiba")
  PARANA              @map("Parana")
  PERNAMBUCO          @map("Pernambuco")
  PIAUI               @map("Piaui")
  RIO_DE_JANEIRO      @map("Rio de Janeiro")
  RIO_GRANDE_DO_NORTE @map("Rio Grande do Norte")
  RIO_GRANDE_DO_SUL   @map("Rio Grande do Sul")
  RONDONIA            @map("Rondonia")
  RORAIMA             @map("Roraima")
  SANTA_CATARINA      @map("Santa Catarina")
  SAO_PAULO           @map("Sao Paulo")
  SERGIPE             @map("Sergipe")
  TOCANTINS           @map("Tocantins")

  @@map("brazilian_states")
}

enum LocationTypes {
  CENTRAL_AND_LARGE_FLOWERBEDS                    @map("Central and Large Flowerbeds")
  COURT_EDGE                                      @map("Court Edges")
  GARDEN                                          @map("Garden")
  SQUARE                                          @map("Square")
  OVERLOOK                                        @map("Overlook")
  PARK                                            @map("Park")
  FENCED_PARK                                     @map("Fenced Park")
  UNOCCUPIED_PLOT                                 @map("Unoccupied Plot")
  REMNANTS_OF_ROAD_CONSTRUCTION_AND_LAND_DIVISION @map("Remnants of Road Construction/Land Division")
  ROUNDABOUTS                                     @map("Roundabouts") // não achei nenhuma informação sobre o que são rotatórios então considerei que eram rotatórias
  INTERCHANGE                                     @map("Interchange")

  @@map("location_types")
}

enum UserTypes {
  ADMIN      @map("Admin")
  RESEARCHER @map("Researcher")

  @@map("user_types")
}

enum CalculationTypes {
  SUM        @map("Sum")
  AVERAGE    @map("Average")
  PERCENTAGE @map("Percentage")

  @@map("calculation_types")
}

enum CategoryTypes {
  FOR_SOCIAL_PRACTICES              @map("for Social Practices")
  OPEN_SPACE_FOR_NON_COLLECTIVE_USE @map("Open Space for non-Collective Use")

  @@map("category_types")
}

enum QuestionTypes {
  WRITTEN @map("Written")
  OPTIONS @map("Options")

  @@map("question_types")
}

enum QuestionResponseCharacterTypes {
  TEXT   @map("Text")
  NUMBER @map("Number")
}

enum QuestionGeometryTypes {
  POINT   @map("Point")
  POLYGON @map("Polygon")
}

enum OptionTypes {
  RADIO    @map("radio")
  CHECKBOX @map("checkbox")

  @@map("option_types")
}

enum Condition {
  TERRIBLE @map("terrible")
  POOR     @map("poor")
  GOOD     @map("good")
  GREAT    @map("great")

  @@map("maintenance")
}

enum Interference {
  SMALL  @map("small")
  MEDIUM @map("medium")
  GREAT  @map("great")

  @@map("interference")
}

enum Visibility {
  UP_TO_25  @map("up to 25%")
  UP_TO_50  @map("up to 50%")
  UP_TO_75  @map("up to 75%")
  UP_TO_100 @map("up to 100%")

  @@map("visibility")
}

enum AgeGroup {
  CHILD   @map("child")
  TEEN    @map("teen")
  ADULT   @map("adult")
  ELDERLY @map("elderly")

  @@map("age_group")
}

enum Activity {
  SEDENTARY @map("sedentary")
  WALKING   @map("walking")
  STRENUOUS @map("strenuous")

  @@map("atividade")
}

// Don't really like naming this gender since you can't really tell someones gender based on the way they look
// but since they're going to be needing this data we might as well be as inclusive as possible
enum Gender {
  MALE   @map("male")
  FEMALE @map("female")

  @@map("gender")
}

enum NoiseLocation {
  CENTER       @map("center")
  SURROUNDINGS @map("surroundings")

  @@map("noise_categories")
}

enum WeatherConditions {
  CLOUDY @map("cloudy")
  SUNNY  @map("sunny")

  @@map("weather_conditions")
}

// #endregion

// #region Auth
//  ------------------------------------------------------------------------------------------------------------
//  Auth
//  ------------------------------------------------------------------------------------------------------------

model User {
  id String @id @unique

  email           String?   @db.VarChar(255)
  username        String    @unique @db.VarChar(255)
  type            UserTypes
  hashed_password String

  auth_session Session[]

  assessment Assessment[]

  response       Response[]
  responseOption ResponseOption[]
  tally          Tally[]

  @@index([username])
  @@map("user")
}

model Session {
  id String @id @unique

  expiresAt DateTime @map("expires_at")

  userId String @map("user_id")
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

// #endregion

// #region Formulários
//  ------------------------------------------------------------------------------------------------------------
//  Formulários
//  ------------------------------------------------------------------------------------------------------------

model Category {
  id Int @id @default(autoincrement())

  name        String        @unique @db.VarChar(255)
  optional    Boolean       @default(false)
  active      Boolean       @default(true)
  question    Question[]
  calculation Calculation[]

  subcategory Subcategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Subcategory {
  id Int @id @default(autoincrement())

  name        String        @db.VarChar(255)
  optional    Boolean       @default(false)
  active      Boolean       @default(true)
  question    Question[]
  calculation Calculation[]

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, name])
  @@map("subcategory")
}

model Question {
  id Int @id @default(autoincrement())

  name              String                         @db.VarChar(255)
  notes             String?                        @db.VarChar(255)
  type              QuestionTypes
  characterType     QuestionResponseCharacterTypes @map("character_type")
  forms             Form[]
  response          Response[]
  minValue          Int?
  maxValue          Int?
  optionType        OptionTypes?                   @map("option_type")
  // Should only have a value if optionType == CHECKBOX
  maximumSelections Int?                           @map("maximum_selections")
  geometryTypes     QuestionGeometryTypes[]        @map("geometryTypes")

  assessment Assessment[]

  categoryId    Int           @map("category_id")
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategoryId Int?          @map("subcategory_id")
  subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  options       Option[]
  calculation   Calculation[]

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  ResponseOption ResponseOption[]

  geometries QuestionGeometry[]

  @@map("question")
}

model QuestionGeometry {
  id           Int        @id @default(autoincrement())
  questionId   Int        @map("question_id")
  question     Question   @relation(fields: [questionId], references: [id])
  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  geometry Unsupported("Geometry")?

  @@unique([assessmentId, questionId], name: "assessmentId_questionId")
  @@map("question_geometry")
}

model Calculation {
  id Int @id @default(autoincrement())

  type          CalculationTypes
  name          String           @db.VarChar(255)
  questions     Question[]
  categoryId    Int              @map("category_id")
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategoryId Int?             @map("subcategory_id")
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  form          Form[]

  @@map("calculation")
}

model Response {
  id   Int           @id @default(autoincrement())
  type QuestionTypes

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  response  String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([assessmentId, questionId], name: "assessmentId_questionId")
  @@map("response")
}

model Option {
  id Int @id @default(autoincrement())

  text String @db.VarChar(255)

  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  ResponseOption ResponseOption[]

  @@map("option")
}

model ResponseOption {
  id Int @id @default(autoincrement())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  assessmentId Int        @map("assessment_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  optionId Int?    @map("option_id")
  option   Option? @relation(fields: [optionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("response_option")
}

model Form {
  id      Int @id @default(autoincrement())
  version Int @default(0)

  name         String        @db.VarChar(255)
  questions    Question[]
  assessment   Assessment[]
  calculations Calculation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("form")
}

// #endregion

// #region Informações da Praça
//  ------------------------------------------------------------------------------------------------------------
//  Informações da Praça
//  ------------------------------------------------------------------------------------------------------------

model Location {
  id Int @id @default(autoincrement())

  name                String    @db.VarChar(255)
  popularName         String?   @db.VarChar(255)
  firstStreet         String    @db.VarChar(255)
  secondStreet        String    @db.VarChar(255)
  isPark              Boolean?  @map("is_park")
  notes               String?   @db.Text
  creationYear        DateTime? @map("creation_year") @db.Date // ? possivelmente deveriamos armazenar como um VarChar(4)
  lastMaintenanceYear DateTime? @map("last_maintenance_year") @db.Date // ? possivelmente deveriamos armazenar como um VarChar(4)
  overseeingMayor     String?   @map("overseeing_mayor") @db.VarChar(255)
  legislation         String?   @db.VarChar(255)
  usableArea          Float?    @map("usable_area")
  legalArea           Float?    @map("legal_area")
  incline             Float?
  inactiveNotFound    Boolean?  @map("inactive_not_found") // ? isso não seria por avaliação ao invés de por praça?
  polygonArea         Float?    @map("polygon_area")

  type     LocationTypes?
  category CategoryTypes?                               @map("category")
  polygon  Unsupported("Geometry(MultiPolygon, 4326)")?

  narrowAdministrativeUnitId       Int?
  narrowAdministrativeUnit         NarrowAdministrativeUnit?       @relation(fields: [narrowAdministrativeUnitId], references: [id])
  intermediateAdministrativeUnitId Int?
  intermediateAdministrativeUnit   IntermediateAdministrativeUnit? @relation(fields: [intermediateAdministrativeUnitId], references: [id])
  broadAdministrativeUnitId        Int?
  broadAdministrativeUnit          BroadAdministrativeUnit?        @relation(fields: [broadAdministrativeUnitId], references: [id])

  assessment Assessment[]
  tally      Tally[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("location")
}

model City {
  id Int @id @default(autoincrement())

  name  String          @db.VarChar(255)
  state BrazilianStates

  narrowAdministrativeUnit       NarrowAdministrativeUnit[]
  intermediateAdministrativeUnit IntermediateAdministrativeUnit[]
  broadAdministrativeUnit        BroadAdministrativeUnit[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([name, state])
  @@map("city")
}

model NarrowAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_narrowUnitName")
  @@map("narrow_administrative_unit")
}

model IntermediateAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_intermediateUnitName")
  @@map("intermediate_administrative_unit")
}

model BroadAdministrativeUnit {
  id Int @id @default(autoincrement())

  name String

  location Location[]

  cityId Int  @map("city_id")
  city   City @relation(fields: [cityId], references: [id])

  @@unique([cityId, name], name: "cityId_broadUnitName")
  @@map("broad_administrative_unit")
}

// #endregion

// #region Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Informações das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Assessment {
  id Int @id @default(autoincrement())

  startDate DateTime  @map("start_date") @db.Timestamptz()
  endDate   DateTime? @map("end_date") @db.Timestamptz()

  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  formId Int  @map("form_id")
  form   Form @relation(fields: [formId], references: [id])

  question       Question[]
  response       Response[]
  responseOption ResponseOption[]

  geometries QuestionGeometry[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("assessment")
}

// #endregion

// #region Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações
//  ------------------------------------------------------------------------------------------------------------

model Noise {
  id Int @id @default(autoincrement())

  location   NoiseLocation
  soundLevel Float                                 @map("sound_level")
  point      Unsupported("Geometry(Point, 4326)")?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([point], name: "location_idx", type: Gist)
  @@map("noise")
}

// #endregion

// #region Campos das Avaliações Não Relacionados à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------
//  Campos das Avaliações Não Relacionadas à Avaliação Física
//  ------------------------------------------------------------------------------------------------------------

model Tally {
  id Int @id @default(autoincrement())

  //tallyGroup Int       @map("tally_group")
  startDate DateTime  @map("start_date") @db.Timestamptz(0)
  endDate   DateTime? @map("end_date") @db.Timestamptz(0)

  animalsAmount        Int?               @map("animals_amount")
  temperature          Float?
  weatherCondition     WeatherConditions? @map("weather_condition")
  groups               Int?
  commercialActivities Json?              @map("commercial_activities")

  userId String @map("user_id") @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])

  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  tallyPerson TallyPerson[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("tally")
}

model TallyPerson {
  id Int @id @default(autoincrement())

  tally   Tally @relation(fields: [tallyId], references: [id])
  tallyId Int   @map("tally_id")

  person   Person @relation(fields: [personId], references: [id])
  personId Int    @map("person_id")

  quantity Int

  @@unique([tallyId, personId], name: "tally_id_person_id")
  @@map("tally_person")
}

model Person {
  id Int @id @default(autoincrement())

  ageGroup                    AgeGroup @map("age_group")
  gender                      Gender
  activity                    Activity @map("activity")
  isTraversing                Boolean  @map("is_traversing")
  isPersonWithImpairment      Boolean  @map("is_person_with_impairment") // * Inclusive language
  isInApparentIllicitActivity Boolean  @map("is_in_apparent_illicit_activity")
  isPersonWithoutHousing      Boolean  @map("is_person_without_housing") // * Inclusive language

  TallyPerson TallyPerson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([ageGroup, gender, activity, isTraversing, isPersonWithImpairment, isInApparentIllicitActivity, isPersonWithoutHousing], name: "person_characteristics")
  @@map("person")
}

// #endregion
